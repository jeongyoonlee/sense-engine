// Generated by CoffeeScript 1.3.3
(function() {
  var Dashboard, EventEmitter, marked, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  marked = require('marked');

  Dashboard = (function(_super) {

    __extends(Dashboard, _super);

    function Dashboard(implementation) {
      this.ready = __bind(this.ready, this);

      this.start = __bind(this.start, this);

      this._next = __bind(this._next, this);

      this.interrupt = __bind(this.interrupt, this);

      this.input = __bind(this.input, this);

      this.text = __bind(this.text, this);

      this.prompt = __bind(this.prompt, this);

      this.warning = __bind(this.warning, this);

      this.error = __bind(this.error, this);

      this.markdown = __bind(this.markdown, this);

      this.help = __bind(this.help, this);

      this.comment = __bind(this.comment, this);

      this.widget = __bind(this.widget, this);

      this.html = __bind(this.html, this);

      this.result = __bind(this.result, this);

      this.code = __bind(this.code, this);

      this._output = __bind(this._output, this);

      this._increment = __bind(this._increment, this);

      this._flushText = __bind(this._flushText, this);

      this.clearCommands = __bind(this.clearCommands, this);

      this.execute = __bind(this.execute, this);

      this.complete = __bind(this.complete, this);

      this.chunk = __bind(this.chunk, this);
      this._implementation = implementation;
      this._commandQueue = [];
      this._executing = false;
      this._cell = 1;
      this._lastType = null;
      this._textBuffer = '';
      this._started = false;
      this._executing = false;
      this.worker = process;
      this._throttledText = _.debounce(this._flushText, 300);
    }

    Dashboard.prototype.chunk = function(input) {
      return [input];
    };

    Dashboard.prototype.complete = function(input) {
      return [];
    };

    Dashboard.prototype.execute = function(input, next) {
      return void 0;
    };

    Dashboard.prototype.clearCommands = function() {
      return this._commandQueue = [];
    };

    Dashboard.prototype._flushText = function() {
      if (this._textBuffer.length) {
        this.emit('output', {
          type: 'text',
          data: this._textBuffer,
          cell: this._cell
        });
        return this._textBuffer = '';
      }
    };

    Dashboard.prototype._increment = function() {
      return this._cell += 1;
    };

    Dashboard.prototype._output = function(type, data) {
      this._flushText();
      if (this._lastType === 'text') {
        this._increment();
      }
      this.emit('output', {
        type: type,
        data: data,
        cell: this._cell
      });
      this._lastType = type;
      return this._increment();
    };

    Dashboard.prototype.code = function(code, language) {
      return this._output('code', {
        code: code,
        language: language
      });
    };

    Dashboard.prototype.result = function(result) {
      return this._output('result', result);
    };

    Dashboard.prototype.html = function(html) {
      return this._output('html', html);
    };

    Dashboard.prototype.widget = function(widget) {
      return this._output('widget', widget);
    };

    Dashboard.prototype.comment = function(comment) {
      return this._output('comment', comment);
    };

    Dashboard.prototype.help = function(help) {
      return this._output('html', html);
    };

    Dashboard.prototype.markdown = function(markdown) {
      return this._output('html', marked(markdown));
    };

    Dashboard.prototype.error = function(error) {
      return this._output('error', error);
    };

    Dashboard.prototype.warning = function(warning) {
      return this._output('warning', warning);
    };

    Dashboard.prototype.prompt = function(prompt) {
      return this._output('prompt', prompt);
    };

    Dashboard.prototype.text = function(text) {
      this._textBuffer += text;
      this._lastType = 'text';
      return this._throttledText();
    };

    Dashboard.prototype.input = function(input) {
      this._commandQueue = this._commandQueue.concat(this.chunk(input));
      if (!this._executing) {
        return this._next();
      }
    };

    Dashboard.prototype.interrupt = function() {
      this.clearCommands();
      return this.worker.kill('SIGINT');
    };

    Dashboard.prototype._next = function() {
      this._flushText();
      if (this._commandQueue.length) {
        this.emit('processing');
        this._executing = true;
        return this.execute(this._commandQueue.shift(), this._next);
      } else {
        this.emit('ready');
        return this._executing = false;
      }
    };

    Dashboard.prototype.start = function(startupScript) {
      var _this = this;
      this._implementation(this);
      if (startupScript) {
        this._commandQueue = this._commandQueue.concat(this.chunk(startupScript));
      }
      return this.worker.on('exit', function() {
        return process.exit();
      });
    };

    Dashboard.prototype.ready = function() {
      if (!this._started) {
        this._started = true;
        this.emit('started');
        this.emit('ready');
        return this._next();
      }
    };

    return Dashboard;

  })(EventEmitter);

  exports.createDashboard = function(implementation) {
    return new Dashboard(implementation);
  };

}).call(this);
